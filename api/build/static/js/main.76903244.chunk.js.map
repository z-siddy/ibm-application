{"version":3,"sources":["Components/Upload/Upload.js","App.js","serviceWorker.js","index.js"],"names":["Upload","props","state","file","topText","bottomText","imgUrl","previewLink","handleImgChange","bind","handleTopTextChange","handleBottomTextChange","handleImgUrlChange","updateImg","generateMeme","axios","get","responseType","then","a","res","Blob","data","File","setState","URL","createObjectURL","event","this","target","files","value","filename","exec","undefined","FormData","append","post","headers","ext","getFileExtension","path","link","document","createElement","href","setAttribute","body","appendChild","click","remove","alert","catch","error","console","log","className","type","onChange","htmlFor","id","placeholder","onClick","style","marginTop","width","src","alt","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76903244.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./Upload.css\";\r\n\r\nclass Upload extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      file: null,\r\n      topText: null,\r\n      bottomText: null,\r\n      imgUrl: null,\r\n      previewLink: null\r\n    };\r\n    this.handleImgChange = this.handleImgChange.bind(this);\r\n    this.handleTopTextChange = this.handleTopTextChange.bind(this);\r\n    this.handleBottomTextChange = this.handleBottomTextChange.bind(this);\r\n    this.handleImgUrlChange = this.handleImgUrlChange.bind(this);\r\n    this.updateImg = this.updateImg.bind(this);\r\n    this.generateMeme = this.generateMeme.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(`/img/meme.jpg`, {\r\n        responseType: \"arraybuffer\"\r\n      })\r\n      .then(async res => {\r\n        var file = await new Blob([res.data]);\r\n        file = await new File([file], \"meme.jpg\");\r\n        this.setState({\r\n          file: file,\r\n          previewLink: URL.createObjectURL(file)\r\n        });\r\n      });\r\n  }\r\n\r\n  handleImgChange(event) {\r\n    this.setState({\r\n      file: event.target.files[0],\r\n      previewLink: URL.createObjectURL(event.target.files[0])\r\n    });\r\n  }\r\n\r\n  handleTopTextChange(event) {\r\n    this.setState({\r\n      topText: event.target.value\r\n    });\r\n  }\r\n\r\n  handleBottomTextChange(event) {\r\n    this.setState({\r\n      bottomText: event.target.value\r\n    });\r\n  }\r\n\r\n  handleImgUrlChange(event) {\r\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n    this.setState({\r\n      imgUrl: proxyurl + event.target.value\r\n    });\r\n  }\r\n\r\n  updateImg() {\r\n    axios\r\n      .get(this.state.imgUrl, {\r\n        responseType: \"arraybuffer\"\r\n      })\r\n      .then(async res => {\r\n        var file = await new Blob([res.data]);\r\n        file = await new File([file], \"meme.jpg\");\r\n        this.setState({\r\n          file: file,\r\n          previewLink: URL.createObjectURL(file)\r\n        });\r\n      });\r\n  }\r\n\r\n  getFileExtension(filename) {\r\n    return /[.]/.exec(filename) ? /[^.]+$/.exec(filename)[0] : undefined;\r\n  }\r\n\r\n  generateMeme() {\r\n    const data = new FormData();\r\n    data.append(\"file\", this.state.file);\r\n    data.append(\"topText\", this.state.topText);\r\n    data.append(\"bottomText\", this.state.bottomText);\r\n    const config = {\r\n      headers: {\r\n        \"content-type\": \"multipart/form-data\"\r\n      }\r\n    };\r\n    axios\r\n      .post(`/upload`, data, config)\r\n      .then(async res => {\r\n        var ext = this.getFileExtension(res.data.path);\r\n        const link = document.createElement(\"a\");\r\n        link.href = `/${res.data.path}/download`;\r\n        link.setAttribute(\"download\", \"meme.\" + ext);\r\n        document.body.appendChild(link);\r\n        await link.click();\r\n        await link.remove();\r\n        alert(\"Thank you for using this amazing APP!\");\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"col-12 text-center\">\r\n            <h2>Made by <a href=\"https://github.com/z-siddy/\">z.siddy</a></h2>\r\n          </div>\r\n          <div className=\"col-12 col-lg-6 input-box\">\r\n            <div className=\"form-group\">\r\n              <label className=\"btn-bs-file btn btn-lg btn-custom\">\r\n                UPLOAD IMAGE\r\n                <input type=\"file\" onChange={this.handleImgChange} />\r\n              </label>\r\n            </div>\r\n            <div className=\"form-group custom-box\">\r\n              <label htmlFor=\"meme-text-top\">Image URL</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"url-meme\"\r\n                placeholder=\"http://...\"\r\n                onChange={this.handleImgUrlChange}\r\n              />\r\n              <button\r\n                className=\"btn btn-custom\"\r\n                onClick={this.updateImg}\r\n                style={{ marginTop: \"1rem\", width: \"100%\" }}\r\n              >\r\n                FETCH IMAGE\r\n              </button>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"meme-text-top\">TOP TEXT</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"meme-text-top\"\r\n                placeholder=\"(required)\"\r\n                onChange={this.handleTopTextChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"meme-text-bot\">BOTTOM TEXT</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"meme-text-bot\"\r\n                placeholder=\"(required)\"\r\n                onChange={this.handleBottomTextChange}\r\n              />\r\n            </div>\r\n            {this.state.topText && this.state.bottomText ? (\r\n              <div className=\"form-group\">\r\n                <button\r\n                  className=\"btn btn-custom\"\r\n                  onClick={this.generateMeme}\r\n                  style={{ marginTop: \"1rem\", width: \"100%\" }}\r\n                >\r\n                  DOWNLOAD\r\n                </button>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n          <div className=\"col-12 col-lg-6 meme-box\">\r\n            <img\r\n              className=\"img-fluid\"\r\n              src={this.state.previewLink}\r\n              alt=\"Meme pic\"\r\n            />\r\n            <h2 className=\"top\">{this.state.topText}</h2>\r\n            <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Upload;","import React from 'react';\nimport Upload from './Components/Upload/Upload';\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <Upload/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}